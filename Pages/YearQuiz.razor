@page "/year-quiz"
@using pub_quiz.Models
@using System.Text.Json
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Year Quiz | Pub-Quiz App</PageTitle>

<div class="sort-quiz-container @(_quizData != null ? "playing" : "")">
    @if (_quizData == null)
    {
        <div class="quiz-setup">
            <h2>üìÖ Year Quiz</h2>
            <p class="lead">Guess the year of historical events. How close can you get?</p>
            
            <div class="how-to-play">
                <h3>How to Play</h3>
                <div class="instructions">
                    <div class="instruction-step">
                        <span class="step-number">1</span>
                        <div class="step-content">
                            <h4>Download the template</h4>
                            <p>Get the JSON template file to create your own year quiz</p>
                        </div>
                    </div>
                    <div class="instruction-step">
                        <span class="step-number">2</span>
                        <div class="step-content">
                            <h4>Create your quiz</h4>
                            <p>Edit the JSON file with titles and years (0-9999). Each item needs a title and the correct year.</p>
                            <p><strong>üí° Tip:</strong> You can also find ready-made quizzes in our <a href="https://github.com/selmaohneh/pub-quiz.app/tree/master/quizzes" target="_blank">GitHub quizzes folder</a>!</p>
                        </div>
                    </div>
                    <div class="instruction-step">
                        <span class="step-number">3</span>
                        <div class="step-content">
                            <h4>Watch the timer</h4>
                            <p>A progress bar fills every 10 seconds. The longer you wait, the bigger the acceptable range becomes (¬±0, ¬±1, ¬±2, etc.)</p>
                        </div>
                    </div>
                    <div class="instruction-step">
                        <span class="step-number">4</span>
                        <div class="step-content">
                            <h4>Stop and guess</h4>
                            <p>Press "Stop & Guess" and enter your year. If you're within the current range, you win!</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="upload-section">
                <div class="button-group">
                    <button class="btn btn-primary" @onclick="DownloadTemplate">Download Template</button>
                    <button class="btn btn-success" @onclick="TriggerFileUpload">Upload and Play</button>
                    <InputFile @ref="fileInput" OnChange="HandleFileUpload" accept=".json" style="display: none;" />
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger mt-3">@_errorMessage</div>
            }
        </div>
    }
    else
    {
        <h2 class="game-title">@_quizData.Title</h2>
        
        @if (!_gameState.GameEnded && !_gameState.GameStopped)
        {
            <div class="year-game-container">
                <div class="range-display">
                    <h3>¬±@_gameState.CurrentRange</h3>
                </div>
                
                <div class="event-title">
                    <h1>@_gameState.CurrentItem?.Title</h1>
                </div>
                
                <div class="progress-container">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: @(_gameState.ProgressPercentage)%"></div>
                    </div>
                </div>
                
                <div class="stop-button-container">
                    <button class="btn btn-danger btn-lg stop-button" @onclick="StopGame">
                        üõë Stop & Guess
                    </button>
                </div>
            </div>
        }
        else if (_gameState.GameStopped && !_gameState.GameEnded)
        {
            <div class="guess-container">
                <div class="range-display">
                    <h3>Your range: ¬±@_gameState.CurrentRange</h3>
                </div>
                
                <div class="event-title">
                    <h2>@_gameState.CurrentItem?.Title</h2>
                </div>
                
                <div class="guess-input">
                    <label for="yearGuess">Enter your guess (0-9999):</label>
                    <input type="number" id="yearGuess" @bind="_yearGuessInput" @bind:event="oninput" @onkeypress="HandleGuessKeyPress" min="0" max="9999" class="form-control guess-number-input" />
                </div>
                
                <div class="guess-buttons">
                    <button class="btn btn-primary btn-lg" @onclick="SubmitGuess">Submit Guess</button>
                </div>
            </div>
        }
        else if (_gameState.GameEnded)
        {
            <div class="game-result @(_gameState.GameWon ? "success" : "failure")">
                <div class="result-title">
                    <h3>@(_gameState.GameWon ? "Correct! üéâ" : (_gameState.PlayerGuess == 0 ? "Time's Up! ‚è∞" : "Wrong! üòî"))</h3>
                    @if (!_gameState.GameWon && _gameState.PlayerGuess != 0)
                    {
                        <h4 class="off-by-text">You are off by @(Math.Abs(_gameState.PlayerGuess - _gameState.CurrentItem!.Year)) years</h4>
                    }
                    else if (!_gameState.GameWon && _gameState.PlayerGuess == 0)
                    {
                        <h4 class="off-by-text">The range reached ¬±1000 years!</h4>
                    }
                </div>
                
                <div class="result-details">
                    <div class="event-info">
                        <h4>@_gameState.CurrentItem?.Title</h4>
                        <p class="correct-year">Correct Year: <strong>@_gameState.CurrentItem?.Year</strong></p>
                        @if (_gameState.PlayerGuess != 0)
                        {
                            <p class="your-guess">Your Guess: <strong>@_gameState.PlayerGuess</strong></p>
                        }
                        else
                        {
                            <p class="your-guess">No guess made - time ran out!</p>
                        }
                        <p class="range-info">Final Range: <strong>@(_gameState.CurrentItem?.Year - _gameState.CurrentRange) - @(_gameState.CurrentItem?.Year + _gameState.CurrentRange)</strong> (¬±@_gameState.CurrentRange)</p>
                    </div>
                </div>
                
                <div class="next-buttons">
                    @if (_gameState.CurrentItemIndex < _gameState.Items.Count - 1)
                    {
                        <button class="btn btn-primary" @onclick="NextRound">Next Round</button>
                    }
                    <button class="btn btn-secondary" @onclick="ResetGame">New Game</button>
                </div>
            </div>
        }
    }
</div>

<style>
    .year-game-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 60vh;
        gap: 2rem;
    }

    .range-display h3 {
        font-size: 3rem;
        color: #007bff;
        margin: 0;
        font-weight: bold;
    }

    .event-title h1 {
        font-size: 2.5rem;
        text-align: center;
        margin: 0;
        font-weight: 300;
        line-height: 1.2;
    }

    .progress-container {
        width: 100%;
        max-width: 600px;
        text-align: center;
    }



    .progress-bar {
        width: 100%;
        height: 20px;
        background-color: #e9ecef;
        border-radius: 0;
        overflow: hidden;
        margin-bottom: 0.5rem;
    }

    .progress-fill {
        height: 100%;
        background: #007bff;
        transition: width 0.25s ease-out;
        will-change: width;
    }

    .stop-button-container {
        margin-top: 1rem;
    }

    .stop-button {
        font-size: 1.5rem;
        padding: 1rem 2rem;
        border-radius: 0;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        transition: all 0.2s ease;
    }

    .stop-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.3);
    }

    .guess-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
        max-width: 500px;
        margin: 0 auto;
    }

    .guess-input {
        width: 100%;
        text-align: center;
    }

    .guess-input label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
    }

    .guess-input input {
        font-size: 1.5rem;
        text-align: center;
        padding: 0.75rem;
    }

    .guess-number-input::-webkit-outer-spin-button,
    .guess-number-input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .guess-number-input[type=number] {
        -moz-appearance: textfield;
    }

    .result-title {
        text-align: center;
        margin-bottom: 2rem;
    }

    .result-title h3 {
        margin-bottom: 0.5rem;
    }

    .off-by-text {
        font-size: 1.5rem;
        color: #dc3545;
        font-weight: bold;
        margin: 0;
    }

    .result-details {
        text-align: center;
        margin: 2rem 0;
    }

    .event-info p {
        margin: 0.5rem 0;
        font-size: 1.1rem;
    }



    .next-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 2rem;
    }
</style>

@code {
    private YearQuizData? _quizData;
    private YearGameState _gameState = new();
    private string _errorMessage = string.Empty;
    private InputFile? fileInput;
    private Timer? _gameTimer;
    private int _yearGuessInput;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addKeyboardListeners", DotNetObjectReference.Create(this));
        }
        
        // Auto-focus and select text when guess input is shown
        if (_gameState.GameStopped && !_gameState.GameEnded)
        {
            await JSRuntime.InvokeVoidAsync("focusAndSelectInput", "yearGuess");
        }
    }

    public void Dispose()
    {
        _gameTimer?.Dispose();
    }

    public async ValueTask DisposeAsync()
    {
        _gameTimer?.Dispose();
        await JSRuntime.InvokeVoidAsync("removeKeyboardListeners");
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        _errorMessage = string.Empty;
        
        try
        {
            var file = e.File;
            if (file.Size > 1024 * 1024) // 1MB limit
            {
                _errorMessage = "File size must be less than 1MB.";
                return;
            }

            using var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();
            
            _quizData = JsonSerializer.Deserialize<YearQuizData>(content, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (_quizData == null)
            {
                _errorMessage = "Invalid JSON format.";
                return;
            }

            if (_quizData.Items.Count < 1)
            {
                _errorMessage = "Quiz must have at least 1 item.";
                return;
            }

            // Validate years are in range
            foreach (var item in _quizData.Items)
            {
                if (item.Year < 0 || item.Year > 9999)
                {
                    _errorMessage = $"Year {item.Year} is out of range (0-9999).";
                    return;
                }
            }

            InitializeGame();
            await TrackYearQuizStarted();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading file: {ex.Message}";
        }
    }

    private void InitializeGame()
    {
        if (_quizData == null) return;

        // Shuffle items
        var random = new Random();
        var shuffledItems = _quizData.Items.OrderBy(x => random.Next()).ToList();

        _gameState = new YearGameState
        {
            Items = shuffledItems,
            CurrentItemIndex = 0,
            CurrentItem = shuffledItems.FirstOrDefault(),
            CurrentRange = 0,
            GameStarted = true,
            GameStartTime = DateTime.Now,
            LastRangeUpdateTime = DateTime.Now
        };

        StartGameTimer();
    }

    [JSInvokable]
    public async Task HandleKeyPress(string key)
    {
        if (!_gameState.GameEnded && !_gameState.GameStopped && (key == " " || key == "Enter"))
        {
            StopGame();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleGuessKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SubmitGuess();
        }
    }

    private async Task PlaySound(string soundType)
    {
        try
        {
            if (soundType == "correct")
            {
                await JSRuntime.InvokeVoidAsync("playCorrectSound");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("playIncorrectSound");
            }
        }
        catch
        {
            // Sound playback failed, continue silently
        }
    }

    private void StartGameTimer()
    {
        _gameTimer?.Dispose();
        _gameTimer = new Timer(UpdateGameProgress, null, 0, 250); // Update every 250ms instead of 100ms for better mobile performance
    }

    private async void UpdateGameProgress(object? state)
    {
        if (_gameState.GameStopped || _gameState.GameEnded) return;

        var now = DateTime.Now;
        var timeSinceLastUpdate = now - _gameState.LastRangeUpdateTime;
        var totalSeconds = timeSinceLastUpdate.TotalSeconds;

        // Update progress percentage (0-100 over 10 seconds) with smoother calculation
        var newProgressPercentage = Math.Min(100, (totalSeconds / 10.0) * 100);
        
        // Only update if there's a meaningful change to reduce unnecessary re-renders
        if (Math.Abs(newProgressPercentage - _gameState.ProgressPercentage) > 0.5)
        {
            _gameState.ProgressPercentage = newProgressPercentage;
        }

        // Check if we need to increase the range
        if (totalSeconds >= 10)
        {
            // Check if round should end at 1000 range
            if (_gameState.CurrentRange >= 1000)
            {
                _gameState.GameEnded = true;
                _gameState.GameWon = false;
                _gameState.PlayerGuess = 0; // No guess was made
                _gameTimer?.Dispose();
                await InvokeAsync(StateHasChanged);
                return;
            }

            // Progressive range increase logic
            var nextRange = GetNextRange(_gameState.CurrentRange);
            _gameState.CurrentRange = nextRange;
            _gameState.LastRangeUpdateTime = now;
            _gameState.ProgressPercentage = 0;
        }

        await InvokeAsync(StateHasChanged);
    }

    private int GetNextRange(int currentRange)
    {
        if (currentRange < 10)
        {
            // 0-9: increase by 1
            return currentRange + 1;
        }
        else if (currentRange < 20)
        {
            // 10-18: increase by 2
            return currentRange + 2;
        }
        else if (currentRange < 50)
        {
            // 20-45: increase by 5
            return currentRange + 5;
        }
        else if (currentRange < 100)
        {
            // 50-90: increase by 10
            return currentRange + 10;
        }
        else if (currentRange < 1000)
        {
            // 100-900: increase by 100
            return currentRange + 100;
        }
        else
        {
            // At 1000, stay at 1000 (game will end on next update)
            return 1000;
        }
    }

    private void StopGame()
    {
        _gameTimer?.Dispose();
        _gameState.GameStopped = true;
    }

    private async Task SubmitGuess()
    {
        if (_gameState.CurrentItem == null) return;

        _gameState.PlayerGuess = _yearGuessInput;
        _gameState.GameEnded = true;

        var correctYear = _gameState.CurrentItem.Year;
        var lowerBound = correctYear - _gameState.CurrentRange;
        var upperBound = correctYear + _gameState.CurrentRange;

        _gameState.GameWon = _yearGuessInput >= lowerBound && _yearGuessInput <= upperBound;

        // Play sound based on result
        if (_gameState.GameWon)
        {
            await PlaySound("correct");
        }
        else
        {
            await PlaySound("incorrect");
        }
    }

    private void NextRound()
    {
        if (_gameState.CurrentItemIndex < _gameState.Items.Count - 1)
        {
            _gameState.CurrentItemIndex++;
            _gameState.CurrentItem = _gameState.Items[_gameState.CurrentItemIndex];
            _gameState.CurrentRange = 0;
            _gameState.GameStarted = true;
            _gameState.GameStopped = false;
            _gameState.GameEnded = false;
            _gameState.GameWon = false;
            _gameState.PlayerGuess = 0;
            _gameState.ProgressPercentage = 0;
            _gameState.GameStartTime = DateTime.Now;
            _gameState.LastRangeUpdateTime = DateTime.Now;
            _yearGuessInput = 0;
            
            StartGameTimer();
        }
    }

    private async Task DownloadTemplate()
    {
        var template = new YearQuizData
        {
            Title = "Historical Events",
            Hint = "Add titles and years (0-9999) for historical events, inventions, or any time-based quiz.",
            Items = new List<YearQuizItem> 
            { 
                new() { Title = "Fall of the Berlin Wall", Year = 1989 },
                new() { Title = "First Moon Landing", Year = 1969 },
                new() { Title = "World War II Ended", Year = 1945 },
                new() { Title = "The Internet was Created", Year = 1983 }
            }
        };

        var json = JsonSerializer.Serialize(template, new JsonSerializerOptions { WriteIndented = true });
        var bytes = System.Text.Encoding.UTF8.GetBytes(json);
        var base64 = Convert.ToBase64String(bytes);
        
        await JSRuntime.InvokeVoidAsync("downloadFile", "year-quiz-template.json", base64);
    }

    private async Task TriggerFileUpload()
    {
        if (fileInput != null)
        {
            await JSRuntime.InvokeVoidAsync("triggerFileInput", fileInput.Element);
        }
    }

    private async Task TrackYearQuizStarted()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("trackPlausibleEvent", "year-quiz-started", new { });
        }
        catch
        {
            // Analytics tracking failed, continue silently
        }
    }

    private void ResetGame()
    {
        _gameTimer?.Dispose();
        _quizData = null;
        _gameState = new YearGameState();
        _errorMessage = string.Empty;
        _yearGuessInput = 0;
    }


} 